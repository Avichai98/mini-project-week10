name: Terraform Apply with Provisioning

    
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    outputs:
      ssh_public_key:
        description: "SSH Public Key for VM Access"
        value: ${{ jobs.terraform.outputs.ssh_public_key }}
      public_ip:
        description: "Public IP of the provisioned VM"
        value: ${{ jobs.terraform.outputs.public_ip }}
    secrets:
      AZURE_CREDENTIALS:
        required: true
        description: "Azure Service Principal Credentials"
      SSH_PRIVATE_KEY:
        required: true
        description: "SSH Private Key for Terraform"

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Define SSH Private Key
      run: |
        mkdir -p ~/vm/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/vm/.ssh/id_rsa
        chmod 600 ~/vm/.ssh/id_rsa

    - name: Derive SSH Public Key
      id: ssh
      run: |
        ssh-keygen -y -f ~/vm/.ssh/id_rsa >     ~/vm/.ssh/id_rsa.pub
        SSH_PUBLIC_KEY=$(cat ~/vm/.ssh/    id_rsa.pub)
        echo "ssh_public_key=$SSH_PUBLIC_KEY" >>     "$GITHUB_OUTPUT"
        echo     "TF_VAR_ssh_public_key=$SSH_PUBLIC_KEY" >>     "$GITHUB_ENV"


    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7
      
    - name: Set Terraform Azure credentials
      run: |
        echo '${{ secrets.AZURE_CREDENTIALS }}' > sp.json
        echo "ARM_CLIENT_ID=$(jq -r .clientId sp.json)" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=$(jq -r .clientSecret sp.json)" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId sp.json)" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=$(jq -r .tenantId sp.json)" >> $GITHUB_ENV

        echo "TF_VAR_subscription_id=$(jq -r .subscriptionId sp.json)" >> $GITHUB_ENV
        echo "TF_VAR_tenant_id=$(jq -r .tenantId sp.json)" >> $GITHUB_ENV
        echo "TF_VAR_client_id=$(jq -r .clientId sp.json)" >> $GITHUB_ENV
        echo "TF_VAR_client_secret=$(jq -r .clientSecret sp.json)" >> $GITHUB_ENV

    - name: Terraform Init
      run: terraform init
      working-directory: infrastructure/${{ inputs.environment }}

    - name: Terraform Import RG if exists in Azure
      run: |
        echo "Checking if resource group already in Terraform state..."
        if terraform state list | grep -q "module.resource_group.azurerm_resource_group.rg"; then
          echo "Resource group already in state — skipping import."
        else
          echo "Checking if resource group exists in Azure..."
          if az group show --name mini_project_RG_${{ inputs.environment }} --output none 2>/dev/null; then
            echo "Importing existing resource group into Terraform state."
            terraform import module.resource_group.azurerm_resource_group.rg "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/mini_project_RG_${{ inputs.environment }}"
          else
            echo "Resource group does not exist in Azure — skipping import."
          fi
        fi
      working-directory: infrastructure/${{ inputs.environment }}
      
    - name: Terraform Plan
      run: terraform plan
      working-directory: infrastructure/${{ inputs.environment }}

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: infrastructure/${{ inputs.environment }}

    - name: Output Public IP
      id: output
      run: echo "public_ip=$(terraform output -raw public_ip)" >> "$GITHUB_OUTPUT"

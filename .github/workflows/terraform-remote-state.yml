name: Terraform Remote State Bootstrap

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  remote_state:
    name: Bootstrap Remote State - ${{ inputs.environment }}
    runs-on: ubuntu-latest

    env:
      TF_VAR_environment: ${{ inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Set Azure Credentials as ENV
        run: |
          echo '${{ secrets.AZURE_CREDENTIALS }}' > sp.json
          echo "ARM_CLIENT_ID=$(jq -r .clientId sp.json)" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(jq -r .clientSecret sp.json)" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId sp.json)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(jq -r .tenantId sp.json)" >> $GITHUB_ENV
          
          echo "TF_VAR_subscription_id=$(jq -r .subscriptionId sp.json)" >> $GITHUB_ENV
          echo "TF_VAR_tenant_id=$(jq -r .tenantId sp.json)" >> $GITHUB_ENV
          echo "TF_VAR_client_id=$(jq -r .clientId sp.json)" >> $GITHUB_ENV
          echo "TF_VAR_client_secret=$(jq -r .clientSecret sp.json)" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init | tee tf-remote_state-init.log
        working-directory: infrastructure/bootstrap/${{ inputs.environment }}

      - name: Terraform Import Resources If Exist
        run: |
          echo "Checking if RG exists in Azure..."
          if az group show --name "remote_state_RG_${{ inputs.environment }}" --output none 2>/dev/null; then
            if ! terraform state list | grep -q "azurerm_resource_group.rg"; then
              echo "Importing Resource Group..."
              terraform import azurerm_resource_group.rg "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/remote_state_RG_${{ inputs.environment }}"
            else
              echo "Resource Group already in state."
            fi
          else
            echo "Resource Group not found in Azure - skipping import."
          fi

          echo "Checking if Storage Account exists..."
          if az storage account show --name "avichai98sa${{ inputs.environment }}" --resource-group "remote_state_RG_${{ inputs.environment }}" --output none 2>/dev/null; then
            if ! terraform state list | grep -q "azurerm_storage_account.sa"; then
              echo "Importing Storage Account..."
              terraform import azurerm_storage_account.sa "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/remote_state_RG_${{ inputs.environment }}/providers/Microsoft.Storage/storageAccounts/avichai98sa${{ inputs.environment }}"
            else
              echo "Storage Account already in state."
            fi
          else
            echo "Storage Account not found - skipping import."
          fi

          echo "Checking if Storage Container exists..."
          if az storage container show \
              --name "remotecontainer${{ inputs.environment }}" \
              --account-name "avichai98sa${{ inputs.environment }}" \
              --auth-mode login \
              --output none 2>/dev/null; then
            if ! terraform state list | grep -q "azurerm_storage_container.terraform"; then
              echo "Importing Storage Container..."
              terraform import azurerm_storage_container.terraform "https://avichai98sa${{ inputs.environment }}.blob.core.windows.net/remotecontainer${{ inputs.environment }}"
            else
              echo "Storage Container already in state."
            fi
          else
            echo "Storage Container not found - skipping import."
          fi
        working-directory: infrastructure/bootstrap/${{ inputs.environment }}


      - name: Terraform Plan - Create Remote State Infra
        run: terraform plan | tee tf-remote-state-plan.log
        working-directory: infrastructure/bootstrap/${{ inputs.environment }}

      - name: Terraform Apply - Create Remote State Infra
        run: terraform apply -auto-approve | tee tf-remote_state-apply.log
        working-directory: infrastructure/bootstrap/${{ inputs.environment }}

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-logs
          path: |
            tf-remote_state-init.log
            tf-remote-state-plan.log
            tf-remote_state-apply.log
